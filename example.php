<?php

//Пример для PHP5(без реализации конкретных методов класса Settings)
class Settings {
private $settings = array();
private static $_instance = null;

private function __construct() {
// приватный конструктор ограничивает реализацию getInstance ()
}

protected function __clone() {
// ограничивает клонирование объекта
}

static public function getInstance() {
if(is_null(self::$_instance))
{
self::$_instance = new self();
}
return self::$_instance;
}

public function import() {
// ...
}

public function get() {
// ...
}
}

//Реализация шаблона Singleton
//
//Ключoм реализации шаблона Singleton является статическая переменная, переменная чье
// значение остается неизменным при исполнении за ее приделами. Это позволяет сохранить объект
// оригинальным между вызовами статического метода Settings::getInstance(), и возвратить ссылку
// на него при каждом последующем вызове метода. Имейте так же в виду, что конструктор, как правило, приватный.
// Что бы обеспечить использование всегда только одного объекта Settings мы должны ограничить доступ к конструктору,
// что бы при попытке создания нового объекта возникала ошибка. Так же следует иметь в виду, что данные ограничения не
// возможны в PHP4.




